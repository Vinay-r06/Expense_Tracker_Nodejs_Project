depolyment to production :

--preparing for depolyment
--depolymentsteps and config
--security


preparing the code for production..

--use environment varaiables--(like api keys, port numbers, passwords)---> avoid hard-coded values in u r code..
--use production API keys--(like razropay api key now used as test api keys for production api key will be depend upon third party -razropay)-->dont use that testing razropay api key
--reduce error output details--(when error happens should contain less information, users should not get our source code..)-->dont send sensitive info to yours users.. here we had default error code..u should create u r own error object..
--set secure response headers(u r application sends response)
-- add assest compression--(serving from assests like from javasacript,css files.)---reduce response size and also time...clent has to download less...modern browser are able to compress assest..
-- configure logging---(aware of whats happening in the server)--stay up to date about whats happening...
--use  SSL/TLS--()-->encrypt data in transit..we using testing was normal http server,our communication to the server was not encrypted--



below three will be often handled by the hosting provider:

add assest compression
configure logging
use  SSL/TLS


environment variables 

environment variables: are concepts supports by nodejs where we can pass certain configuaration, certain values into our node application from outside..the value will be injected when node server starts..

helmet-- this package will add certain headers to the response as u send back..
install -- npm install --save helmet..
u can use this as a middleware...then it will run on all the incoming request..
add helment in app.js
and place app.use after all middleware
run---npm run start:dev  ----new script i added to the  with nodemon..
excute and see the headers were added extra....added special headers are showing


compressing assests...

expressjs compress..middleware package...

install compression--- "npm install --save compression "

after install...go to appjs..import compression...

this will reduce size of lot javascript and css file...for the users...
image file will be not compression..that actually makes longer to load that..
here expense tracker will not required compress because it is server side rendering...


setting up request logging...

install --npm install --save morgan

use in that middleware..and assign argument...which data that u logged..how its formated..
after excute u will fing loggind data from console...we dont want in console...we store in file..
add node core module..."fs"
by this u will know wats going on the server..